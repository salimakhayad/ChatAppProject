@model ChannelSelectedViewModel
@using System.Security.Claims;
@using ChatApp.Models.Group;
@using ChatApp.Domain;

<div class="flexbox-container">
    <!--Channels-->
    <div class="flexbox-item flexbox-item-1">
        <div class="title">
            <img width="250" height="250" src="@String.Format("data:image/gif;base64,{0}", Convert.ToBase64String(@Model.Photo))" />
            <span class="neon">@Model.Name</span>
        </div>

        @foreach (var channel in Model.Channels)
        {
            <div class="channelText">
                <form asp-action="Join" asp-controller="Channel" asp-route-channelId="@channel.Id">
                    <button type="submit"><span>@channel.Name</span></button>
                </form>
            </div>
        }

    </div>
    <!--Messages-->
    <div class="flexbox-item flexbox-item-2">

        <div id="messageDiv" class="messages">

            @foreach (var message in Model.SelectedChannel.Chat.Messages)
            {
                <div class="message">
                    <header>@message.ProfileName</header>
                    @if (message.Type == MessageType.Text)
                    {
                        <p>@message.Text</p>
                    }
                    else if (message.Type == MessageType.Gif)
                    {
                        <img src="@message.Text" width="150" height="150" />
                    }
                    else if (message.Type == MessageType.Image)
                    {
                    <img src="@String.Format("data:image/gif;base64,{0}", Convert.ToBase64String(message.File))" width="150" height="150" />
                    }
                    else if (message.Type == MessageType.File)
                    {
                        <img src="@message.Text" />
                    }
                    <small>@message.Timestamp.ToShortTimeString()</small>
                </div>
            }
        </div>
       
            <!--user input-->
            <form id="inputsendmessage" class="chat-input" onsubmit="sendMessage(event)" asp-controller="Chat" asp-action="CreateMessage">
                <input type="hidden" name="chatId" value="@Model.SelectedChannel.Chat.Id" />
                <!--File upload-->
                <label for="file-upload" class="custom-file-upload">
                    <img src="~/icons/upload-files-icon.png" alt="upload-files-icon" />
                    <input type="file" id="file-input"  />
                </label>
                <input id="file-upload" type="file" />

                <!--Text-->
                <input type="text" name="message" id="user-input" autofocus />

                <!--Gif-->
                <a id="UseGifs" class="gifIcon">
                    <img src="~/icons/gif-icon.png" id="gifImg" alt="gif-icon" />
                </a>



            </form>
    </div>
    <!--Users in channel-->
    <div class="flexbox-item flexbox-item-3">
        <div id="onlineList" class="online">
            <span >Online</span>
        </div>
        <div id="offlineList" class="offline">
            <span >Offline</span>
            @foreach (var profile in Model.Profiles)
            {
                    <div class="user" id="@profile.Id">
                        <span>@profile.UserName
                             @if (Model.OwnerId== profile.Id)
                             {@Html.Raw(" (owner)")}
                        </span>
                    </div>
            }
        </div>



    </div>
</div>
@section scripts
    {
    <script>

       //#region holds chatInputForm
          var chatInputForm;
       //#endregion

       // #region user


        var username = "@Html.Raw(Model.Profile.UserName)";
        var profileIdentifier = "@Html.Raw(Model.Profile.Id)";
        // #endregion

       // #region onload
        window.onload = function () {

            displayCurrentUserOnline();
            makeInputElementVisibleAndScrollChatToBottom();

        }
        var makeInputElementVisibleAndScrollChatToBottom = function ()
        {
            // make input element visible and set scroll bottom
            document.getElementById("inputsendmessage").style = "block";
            document.getElementById("inputsendimage").style = "block";
            scrollChatToBottom();
        }
        var scrollChatToBottom = function ()
        {
            var element = document.getElementById("messageDiv");
            element.scrollTop = element.scrollHeight;
        }
         //#endregion

       //#region connection

             var _connectionId = "";
             var connection = new signalR.HubConnectionBuilder()
                     .withUrl("/chatHub")
                    .build();
                connection.serverTimeoutInMilliseconds = 100000; // 100 second

            // start
            connection.start()
            .then(function(){
             connection.invoke("getConnectionId")
               .then(function(connectionId){
                  _connectionId = connectionId
                  joinChannel();
                    })
                })
                .catch(function(err){
                    console.log(err)
                });
        //#endregion

       //#region giphy api call

        let api = "https://api.giphy.com/v1/gifs/search?";
        let apiKey = "&api_key=JAyUkMRhLZ0mPD6luVhc0AP1EE4zxIbk"
        let query = "&q=";

        let searchResultsGif;
        // #endregion

       // #region jquery
        $(function () {
            $("#UseGifs").on("click", function () {
                console.log("inside click on gif event");
                displayGifInputElements();
                clearMessagesDiv();
            });
        });

        $('input[type=file]').change(function (e)
        {
            var chatId = "@Html.Raw(Model.SelectedChannel.Chat.Id)";
            var file = e.target.files[0];
            var formData = new FormData();
            formData.set('file', file);
            formData.set("chatId", chatId);

            axios({
                method: "post",
                url: "/Chat/SendImage",
                data: formData,
                headers: { "Content-type": "multipart/form-data" }
            }).then(res => {
                console.log("file Sent!")


            }).catch(err => { console.log(err) })

        }
        )
        // #endregion
        
       //#region printFunctions
        var printFile = function (data) {
            console.log("printFile not implemented yet");
        }
        var printImage = function (data) {

            console.log("printImage");
            var message = document.createElement("div");
            message.classList.add("message");

            var header = document.createElement("header");
            header.appendChild(document.createTextNode(data.name));

            var img = document.createElement("img");

            img.src = data.src;
            img.width = 150;
            img.height = 150;


            var small = document.createElement("small");
            var text = data.timestamp;
            small.appendChild(document.createTextNode(text));

            message.appendChild(header);
            message.appendChild(img);
            message.appendChild(small);

            document.getElementById("messageDiv").append(message)
        }
        var printMessage = function (data) {
            console.log("printMessage");
            var message = document.createElement("div");
            message.classList.add("message");

            var header = document.createElement("header");
            header.appendChild(document.createTextNode(data.name));

            var p = document.createElement("p");
            p.appendChild(document.createTextNode(data.text));

            var small = document.createElement("small");
            var text = data.timestamp;
            small.appendChild(document.createTextNode(text));

            message.appendChild(header);
            message.appendChild(p);
            message.appendChild(small);

            document.getElementById("messageDiv").append(message)
        }
        var printGif = function (data) {
            console.log("printGif");
            var message = document.createElement("div");
            message.classList.add("message");

            var header = document.createElement("header");
            header.appendChild(document.createTextNode(data.name));

            var img = document.createElement("img");
            img.src = data.text;
            img.width = 150;
            img.height = 150;


            var small = document.createElement("small");
            var text = data.timestamp;
            small.appendChild(document.createTextNode(text));

            message.appendChild(header);
            message.appendChild(img);
            message.appendChild(small);

            document.getElementById("messageDiv").append(message)

        }
        //#endregion
       //#region Hub | connection.on

        connection.on("ReceiveMessage", function (data) {
            //  MessageType.Text, 0 | MessageType.File, 1 |MessageType.Image,2 | MessageType.Gif   3
            console.log("ReceiveMessage");
            console.log(data);
            if (data.type == 0) { printMessage(data); }
            else if (data.type == 1) { printFile(data);}
            else if (data.type == 2) { printImage(data);}
            else if (data.type == 3) { printGif(data) }

            scrollChatToBottom();
            }
        );
        connection.on("UserJoinedChannel", function (data)
        {
            console.log("UserJoinedChannel");
            //post user has joined. msg in chat
            var message = document.createElement("div");
            message.classList.add("message");
            var header = document.createElement("header");
            header.appendChild(document.createTextNode(data.name));
            var p = document.createElement("p");
            p.appendChild(document.createTextNode(data.text));
            var small = document.createElement("small");
            var text = data.timestamp;
            small.appendChild(document.createTextNode(text));
            message.appendChild(header);
            message.appendChild(p);
            message.appendChild(small);


            document.getElementById("messageDiv").append(message)

            var user = {
                profileId: data.profileId,
                profileName: data.name
            }

            setUserOnline(user);



            });
        connection.on("UserLeftChannel", function (data) {

        console.log("UserLeftChannel");
            // log data
            console.log("data", data);

            //set useroffline
            //setUserOffline(data);
            // create user left message

            var message = document.createElement("div");
            message.classList.add("message");

            var header = document.createElement("header");
            header.appendChild(document.createTextNode("server"));

            var p = document.createElement("p");
            p.appendChild(document.createTextNode(data.profileName + " has left the channel. "));

            message.appendChild(header);
            message.appendChild(p);

            console.log(data.profileName);
            console.log(data.profileId);

            document.getElementById("messageDiv").append(message);
            var user = {
                profileId:data.profileId,
                profileName:data.profileName
            }
            setUserOffline(user);

            });
        connection.on("UpdateUsersOnline", function (data) {
            console.log("UpdateUsersOnline");
            console.log(data);
            data.forEach(element => setUserOnline(element));
        });
        //#endregion
        // setUserOnline
        var setUserOnline = function (data) {

            console.log("setUserOnline");
            if (data.profileId != undefined) {
                console.log(data);

                var userElement = document.getElementById(data.profileId);
                console.log(data.profileId);

                var offlineList = document.getElementById("offlineList");
                var onlineList = document.getElementById("onlineList");
                // check if its a newly joined user
                if (userElement != undefined) {
                    console.log(userElement);
                    console.log(offlineList);
                    console.log(onlineList);
                    onlineList.appendChild(userElement);
                    console.log(offlineList);
                    console.log(onlineList);

                } else {
                    // newly joined user went online
                    var newUserElement = document.createElement("div");
                    newUserElement.classList.add("user");
                    newUserElement.id = data.profileId;
                    var innerSpanElement = document.createElement("span");
                    innerSpanElement.innerHTML = data.profileName;
                    newUserElement.appendChild(innerSpanElement);
                    onlineList.appendChild(newUserElement);
                }
            }
            else
            {
                console.log("invalid data went through setUserOnline()");
            }

        }
       //#region axios | post
        var joinChannel = function () {
            var url = "/Chat/JoinChannel/" + _connectionId + "/@Model.Id"
        axios.post(url, null)
            .then(res => {
                    console.log("Channel Joined!", res);

                })
            .catch(err => {
                    console.log("Failed to join Channel!", err);
                })
        }
        var sendMessage = function(event)
            {
                console.log("sendMessage");
              console.log(event);
                    event.preventDefault();

                    var data = new FormData(event.target);
                    document.getElementById("user-input").value = "";
                    axios.post("/Chat/SendMessage",data)
                    .then(res=>{
                        console.log("Message Sent!")

                    })
                    .catch(err=>{
                        console.log("Failed to send message")

                    })
        }
        var sendGif = function (data) {
            swapGifInputWithChatInput();
            console.log("sendGif");
            var formData = new FormData();
            formData.set("chatId", data.chatId);
            formData.set("gifUrl", data.gifUrl);

            axios({
                method: "post",
                url: "/Chat/SendGif",
                data: formData,
                headers: { "Content-type": "multipart/form-data" }
            }).then(res => {
                console.log("Gif Sent!")


            }).catch(err => { console.log(err) })




        }
        var sendImage = function (data) {


            console.log("sendImage");
            console.log(data);
           // var formData = new FormData();
           // formData.set("chatId", data.chatId);
           // formData.set("file", data.file);
           //
           // axios({
           //     method: "post",
           //     url: "/Chat/SendGif",
           //     data: formData,
           //     headers: { "Content-type": "multipart/form-data" }
           // }).then(res => {
           //     console.log("Gif Sent!")
           //
           //
           // }).catch(err => { console.log(err) })




        }
        //#endregion

       //#region  -Model functions
        var displayCurrentUserOnline = function () {
            console.log("displayCurrentUserOnline");

            var user = {
                profileId: profileIdentifier,
                profileName : username
            }

            setUserOnline(user);

        }
       //#endregion

        // CLEAR messages
        var clearMessagesDiv = function () {
    console.log("Clear Messages Div");
    var messagesNode = document.getElementById("messageDiv");
    messagesNode.innerHTML = "";
}

        // HIDE CHAT input elements
        var hideChatInputElements = function () {
    console.log("hideChatInputElements");
    var chatinput = document.getElementById("user-input");
    chatinput.style.display = "none";

    console.log("hide message-input complete");
    var gificon = document.getElementById("gifImg");
    gificon.style.display = "none";

    console.log("hide gificon complete");
    var fileIcon = document.getElementById("file-upload");
    fileIcon.style.display = "none";

    console.log("hide fileIcon complete");
    var filelLabel = document.getElementsByClassName("custom-file-upload")[0];
    filelLabel.style.display = "none";

    console.log("hide filelLabel complete");



}

        // swap GIF input and  with TEXT input
        var swapGifInputWithChatInput = function ()
        {
            console.log("swapGifInputWithChatInput");
        var middleContainer = document.getElementsByClassName("flexbox-item flexbox-item-2")[0];
            console.log(middleContainer);

        var gifInputForm = document.getElementsByClassName("chat-input")[0];
            console.log(gifInputForm);

        middleContainer.replaceChild(chatInputForm, gifInputForm);
            var msgeDiv = document.getElementById("messageDiv");
            msgeDiv.innerHTML = "";
            var messages = "@Html.Raw(Model.SelectedChannel.Chat.Messages)";
            @foreach (var message in Model.SelectedChannel.Chat.Messages)
            {
                @:displayMessage("@message.ProfileName","@message.Type","@message.Text","@message.Timestamp");
            }
            //console.log(messages);
            console.log("replace succes");
        }

        // DISPLAY message
        var displayMessage = function (profileName,messageType,messageText,messageTimeStamp)
        {
            var msgeDiv = document.getElementById("messageDiv");
            var divElement = document.createElement("div");
            divElement.classList.add("message");
            var header = document.createElement("header");
            header.innerHTML = profileName;
            divElement.appendChild(header);
            if (messageType == "Text")
            {
             var p = document.createElement("p");
             p.innerHTML = messageText;
             divElement.appendChild(p);

            } else if (messageType == "Gif" ||"Image")
            {
                var img = document.createElement("img")
                img.src = messageText;
                img.width = 150;
                img.height = 150;
                divElement.appendChild(img);

            }else if (messageType == "File")
            {

            }
            var small = document.createElement("small");
            small.innerHTML = messageTimeStamp
            divElement.appendChild(small);

            msgeDiv.appendChild(divElement);



        }

        // DISPLAY GiF input elements
        var displayGifInputElements = function () {

              console.log("displayGifInputElements");
              var middleContainer = document.getElementsByClassName("flexbox-item flexbox-item-2")[0];

              var chatinput = document.createElement("input");
              chatinput.id = "gifInputString";


              var button = document.createElement("button");
              button.id = "giphyButton#";
              button.innerText = "Giphy Search";

              button.onclick = function () {

              console.log("Looking up Gifs for entered keyword : " + chatinput.value);
              query = "&q=" + chatinput.value;
              console.log(query);
              url = api + apiKey + query;

              console.log("fetched url: " + url);
              fetch(url)
                  .then(response => response.json())
            .then(content => {
                console.log(content.data);
                console.log("META", content.data);

                updateGifs(content.data);

                this.value = "";
            })
            .catch(err => {
                console.error(err);
            });

        console.log("end of onclick event");
    }


    var gifInputForm = document.createElement("div");
    gifInputForm.classList.add("chat-input");
    gifInputForm.appendChild(chatinput);

    gifInputForm.appendChild(button);

    chatInputForm = document.getElementsByClassName("chat-input")[0];
    middleContainer.replaceChild(gifInputForm, chatInputForm);



    console.log("show gif input - succes");


}
        // UPDATE Gifs
        var updateGifs = function (data) {
         console.log("updateGifs");

         var i = 0;
         for (i; i < 10; i++) {
             if (data[i] != null && data[i] != undefined) {

                 var url = data[i].images.original.url;
                 console.log(url);
                 var image = document.createElement("img");
                 image.width = 150;
                 image.height = 150;
                 image.src = url;
                 image.id = "gif-input";
                 image.value = url;

                 image.addEventListener("click", function (e) {
                     console.log("clicked on gif");
                     console.log(this);
                     var data = {
                         chatId:"@Model.SelectedChannel.Chat.Id",
                         gifUrl: this.value
                     };
                     sendGif(data);
                 });



                 var messagesNode = document.getElementById("messageDiv");
                 messagesNode.appendChild(image);
             }

         }
        }
         // setUserOffline
        var setUserOffline = function (data)
        {
            console.log("setUserOffline");
            var profileElement = document.getElementById(data.profileId);
            var onlineList = document.getElementById("onlineList");
            onlineList.removeChild(profileElement);

        var divElement = document.createElement("div");

        var spanElement = document.createElement("span");
        spanElement.innerText = data.profileName;
        divElement.id = data.profileId;
        if ("@Model.OwnerId" == data.profileId) {
            spanElement.innerText += " (owner) ";
        }

        divElement.appendChild(spanElement);
        divElement.classList.add("user");
        var offlineList = document.getElementById("offlineList");
            offlineList.appendChild(divElement);




        }


    </script>
        
}

