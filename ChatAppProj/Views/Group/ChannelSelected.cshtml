@model ChannelSelectedViewModel
@using System.Security.Claims;
@using ChatApp.Models.Group;
@using ChatApp.Domain;

<div class="flexbox-container">
    <!--Channels-->
    <div class="flexbox-item flexbox-item-1">
        <div class="title">
            <img width="250" height="250" src="@String.Format("data:image/gif;base64,{0}", Convert.ToBase64String(@Model.Photo))" />
            <span class="neon">@Model.Name</span>
        </div>

        @foreach (var channel in Model.Channels)
        {
            <div class="channelText">
                <form asp-action="JoinChannel" asp-controller="Channel" asp-route-channelId="@channel.Id">
                    <button type="submit"><span>@channel.Name</span></button>
                </form>
            </div>
        }

    </div>
    <!--Messages-->
    <div class="flexbox-item flexbox-item-2">

        <div id="messageDiv" class="messages">

            @foreach (var message in Model.SelectedChannel.Chat.Messages)
            {

                <div class="message">
                    <header>@message.ProfileName</header>
                    @if (message.Type == MessageType.Text)
                    {<p>@message.Text</p>}
                else
                @if (message.Type == MessageType.Gif || message.Type == MessageType.Image)
               {<img src="@message.Text" width="150" height="150" />}
            else
            @if (message.Type == MessageType.File)
           {<img src="@message.Text" />}


            <small>@message.Timestamp.ToShortTimeString()</small>
        </div>
    }
        </div>
        <!--user input-->
        <form id="inputsendmessage" class="chat-input" onsubmit="sendMessage(event)" asp-controller="Chat" asp-action="CreateMessage">
            <input type="hidden" name="chatId" value="@Model.SelectedChannel.Chat.Id" />
            <!--File upload-->
            <label for="file-upload" class="custom-file-upload">
                <img src="~/icons/upload-files-icon.png" alt="upload-files-icon" />
                <input type="file" id="file-input" />
            </label>
            <input id="file-upload" type="file" />

            <!--Tekst-->
            <input type="text" name="message" id="user-input" autofocus />

            <!--Gif-->
            <a id="UseGifs" class="gifIcon">
                <img src="~/icons/gif-icon.png" id="gifImg" alt="gif-icon" />
            </a>



        </form>
    </div>
    <!--Users in channel-->
    <div class="flexbox-item flexbox-item-3">
        <div class="online">
            <span id="onlineList">Online</span>
        </div>
        <div class="offline">
            <span id="offlineList">Offline</span>
        </div>



    </div>
</div>
@section scripts
    {
    <script>

       //#region props
          var chatInputForm;
       //#endregion

       // #region user


        var username = "@Html.Raw(Model.Profile.UserName)";
        var profileIdentifier = "@Html.Raw(Model.Profile.Id)";
        // #endregion

       // #region onload
        window.onload = function () {
             // make input element visible
             document.getElementById("inputsendmessage").style="block";
             var element = document.getElementById("messageDiv");
            element.scrollTop = element.scrollHeight;


            displayCurrentUserOnline();


             }
         //#endregion

       //#region connection

             var _connectionId = "";
             var connection = new signalR.HubConnectionBuilder()
                     .withUrl("/chatHub")
                    .build();
                connection.serverTimeoutInMilliseconds = 100000; // 100 second

            // start
            connection.start()
            .then(function(){
             connection.invoke("getConnectionId")
               .then(function(connectionId){
                  _connectionId = connectionId
                  joinChannel();
                    })
                })
                .catch(function(err){
                    console.log(err)
                });
        //#endregion

       //#region giphy api call

        let api = "https://api.giphy.com/v1/gifs/search?";
        let apiKey = "&api_key=JAyUkMRhLZ0mPD6luVhc0AP1EE4zxIbk"
        let query = "&q=";

        let searchResultsGif;
        // #endregion

       // #region jquery
        $(function () {
            $("#UseGifs").on("click", function () {
                console.log("inside click on gif event");
                displayGifInputElements();
                clearMessagesDiv();
                document.getElementById("file-upload").style.display = "none";


            });
        });
        // #endregion

       //#region Hub | connection.on

        connection.on("ReceiveMessage", function (data) {

                console.log("ReceiveMessage");
            var message = document.createElement("div");
            message.classList.add("message");

            var header = document.createElement("header");
            header.appendChild(document.createTextNode(data.name));

            var p = document.createElement("p");
            p.appendChild(document.createTextNode(data.text));

            var small = document.createElement("small");
            var text = data.timestamp;
            small.appendChild(document.createTextNode(text));

            message.appendChild(header);
            message.appendChild(p);
            message.appendChild(small);

            document.getElementById("messageDiv").append(message)
        });

        connection.on("ReceiveGif"), function (data)
        {
            console.log("Gif Received!");
            var message = document.createElement("div");
            message.classList.add("message");

            var header = document.createElement("header");
            header.appendChild(document.createTextNode(data.Name));

            var img = document.createElement("img");
            img.src = data.GifUrl;
            img.width = 150;
            img.height = 150;


            var small = document.createElement("small");
            var text = data.Timestamp;
            small.appendChild(document.createTextNode(text));

            message.appendChild(header);
            message.appendChild(img);
            message.appendChild(small);

            document.getElementById("messageDiv").append(message)
        }

        connection.on("UserJoinedChannel", function (data)
        {
             console.log("UserJoinedChannel");
            //msg in chat
            var message = document.createElement("div");
            message.classList.add("message");

            var header = document.createElement("header");
            header.appendChild(document.createTextNode(data.name));

            var p = document.createElement("p");
            p.appendChild(document.createTextNode(data.text));

            var small = document.createElement("small");
            var text = data.timestamp;
            small.appendChild(document.createTextNode(text));

            message.appendChild(header);
            message.appendChild(p);
            message.appendChild(small);

             document.getElementById("messageDiv").append(message)



            });

        connection.on("UserLeftChannel", function (data) {

        console.log("UserLeftChannel");
            // log data
            console.log("data", data);

            // create user left message

            var message = document.createElement("div");
            message.classList.add("message");

            var header = document.createElement("header");
            header.appendChild(document.createTextNode("server"));

                var p = document.createElement("p");
                p.appendChild(document.createTextNode(data.profileName + " went offline. "));



            message.appendChild(header);
            message.appendChild(p);



                console.log(data.profileId);
            // remove from online list and put into offline
                document.getElementById(data.profileId).remove();
                console.log("remove from online list");

            var ele = document.getElementById("onlineList");
            ele.appendChild(divElement);


              document.getElementById("messageDiv").append(message)
                var element = document.getElementsByClassName("offline");




            });

        connection.on("UpdateUsersOnline", function (data) {
            console.log("UpdateUsersOnline");

            document.getElementsByClassName("user")
                data.forEach(element => addProfile(element));
        });

        //#endregion

       //#region axios | post
           // join channel
        var joinChannel = function () {
        var url = "/Chat/JoinChannel/" + _connectionId + "/@Model.Id"
        axios.post(url, null)
            .then(res => {
                    console.log("Channel Joined!", res);

                })
            .catch(err => {
                    console.log("Failed to join Channel!", err);
                })
        }
        var sendMessage = function(event)
            {
                console.log("sendMessage");
              console.log(event);
                    event.preventDefault();

                    var data = new FormData(event.target);
                    document.getElementById("user-input").value = "";
                    axios.post("/Chat/SendMessage",data)
                    .then(res=>{
                        console.log("Message Sent!")

                    })
                    .catch(err=>{
                        console.log("Failed to send message")

                    })
        }
        var sendGif = function (data) {
            console.log("sendGif");

            var formData = new FormData();
            formData.set("chatId", data.chatId);
            formData.set("gifUrl", data.gifUrl);

            axios({
                method: "post",
                url: "/Chat/SendGif",
                data: formData,
                headers: { "Content-type": "multipart/form-data" }
            }).then(res => {
                console.log("Gif Sent!")
                hideGifInputElements();
            }).catch(err => { console.log(err) })



              // a    console.log("Failed to send Gif")xios.post('/Chat/SendGif', data)
              // .then(res=>{
              //  })   console.log("Gif Sent!")
              // })
              // .catch(err=>{
              //     console.log("Failed to send Gif")
              //
              // })
            }

        //#endregion

       //#region js wiht use of -Model
        var displayCurrentUserOnline = function () {

                  var divElement = document.createElement("div");
                  var spanElement = document.createElement("span");
                  spanElement.innerText = username;
                  divElement.id = profileIdentifier;
                  if ("@Model.OwnerId" == profileIdentifier) {
                      spanElement.innerText += " (owner) ";
                  }

                  divElement.appendChild(spanElement);
                  divElement.classList.add("user");
                  var ele = document.getElementById("onlineList");
                  ele.appendChild(divElement);

        }
       //#endregion


        // clear messagesDiv
        var clearMessagesDiv = function () {
    console.log("Clear Messages Div");
    var messagesNode = document.getElementById("messageDiv");
    messagesNode.innerHTML = "";
}

        // display first 10 GIFS
        var displayGifs = function () {
    console.log("displayGifs");
    console.log("searchResultsGif");
    console.log(searchResultsGif);
    if (searchResultsGif != null && searchResultsGif !== undefined) {
        var i = 0;
        for (i; i < 10; i++) {
            var url = searchResultsGif.data[i].images.original.url;
            var image = document.createElement("img");
            image.width = 150;
            image.height = 150;
            image.src = url;

            var messagesNode = document.getElementById("messageDiv");
            messagesNode.appendChild(image);

        }

    }



    hideChatInputElements();

    displayGifInputElements();


}

        var displayMessages = function()
        {
            clearMessagesDiv();

        }

        //HIDE CHAT input elements
        var hideChatInputElements = function () {
    console.log("hideChatInputElements");
    var chatinput = document.getElementById("user-input");
    chatinput.style.display = "none";

    console.log("hide message-input complete");
    var gificon = document.getElementById("gifImg");
    gificon.style.display = "none";

    console.log("hide gificon complete");
    var fileIcon = document.getElementById("file-upload");
    fileIcon.style.display = "none";

    console.log("hide fileIcon complete");
    var filelLabel = document.getElementsByClassName("custom-file-upload")[0];
    filelLabel.style.display = "none";

    console.log("hide filelLabel complete");



}

        //HIDE GiF input elements
        var hideGifInputElements = function () {
        console.log("hideGifInputElements");
        var middleContainer = document.getElementsByClassName("flexbox-item flexbox-item-2")[0];
        console.log(middleContainer);
        var gifInputForm = document.getElementsByClassName("chat-input")[0];
        console.log(gifInputForm);
        middleContainer.replaceChild(chatInputForm, gifInputForm);
            var msgeDiv = document.getElementById("messageDiv");
            msgeDiv.innerHTML = "";
            var messages = "@Html.Raw(Model.SelectedChannel.Chat.Messages)";

            @foreach (var message in Model.SelectedChannel.Chat.Messages)
            {
                
                @:displayMessage("@message.ProfileName","@message.Type","@message.Text","@message.Timestamp");
            }
            //console.log(messages);
            console.log("replace succes");
        }

        // display message
        var displayMessage = function (profileName,messageType,messageText,messageTimeStamp)
        {
            console.log(profileName);
            console.log(messageType);
            console.log(messageText);
            console.log(messageTimeStamp);

            var msgeDiv = document.getElementById("messageDiv");

            var divElement = document.createElement("div");
            divElement.classList.add("message");
            var header = document.createElement("header");
            header.innerHTML = profileName;
            divElement.appendChild(header);
            if (messageType == "Text") {
             var p = document.createElement("p");
             p.innerHTML = messageText;
             divElement.appendChild(p);

            } else if (messageType == "Gif" ||"Image")
            {
                var img = document.createElement("img")
                img.src = messageText;
                img.width = 150;
                img.height = 150;
                divElement.appendChild(img);

            }else if (messageType == "File")
            {

            }
            var small = document.createElement("small");
            small.innerHTML = messageTimeStamp
            divElement.appendChild(small);

            msgeDiv.appendChild(divElement);
        
            

        }
        //DISPLAY GiF input elements
        var displayGifInputElements = function () {

        console.log("displayGifInputElements");
        var middleContainer = document.getElementsByClassName("flexbox-item flexbox-item-2")[0];

        var chatinput = document.createElement("input");
        chatinput.id = "gifInputString";


        var button = document.createElement("button");
        button.id = "giphyButton#";
        button.innerText = "Giphy";
        button.onclick = function () {

        console.log("Looking up Gifs for entered keyword : " + chatinput.value);
        query = "&q=" + chatinput.value;
        console.log(query);
        url = api + apiKey + query;

        console.log("fetched url: " + url);
        fetch(url)
            .then(response => response.json())
            .then(content => {

                console.log(content.data);
                console.log("META", content.data);

                updateGifs(content.data);

                this.value = "";
            })
            .catch(err => {
                console.error(err);
            });

        console.log("end of onclick event");
    }


    var gifInputForm = document.createElement("div");
    gifInputForm.classList.add("chat-input");
    gifInputForm.appendChild(chatinput);

    gifInputForm.appendChild(button);

    chatInputForm = document.getElementsByClassName("chat-input")[0];
    middleContainer.replaceChild(gifInputForm, chatInputForm);



    console.log("show gif input - succes");


}

        var updateGifs = function (data) {
    console.log("updateGifs");
    console.log(data);
    var i = 0;
    for (i; i < 10; i++) {
        if (data[i] != null && data[i] != undefined) {
            var url = data[i].images.original.url;
            var image = document.createElement("img");
            image.width = 150;
            image.height = 150;
            image.src = url;
            image.id = "gif-input";
            image.value = url;

            var form = document.createElement("form");

            var hiddenInputChatId = document.createElement("input");
            hiddenInputChatId.type = "hidden";
            hiddenInputChatId.class = "gif-input";
            hiddenInputChatId.name = "chatId";
            hiddenInputChatId.value = "@Model.SelectedChannel.Chat.Id";

            var inputGif = document.createElement("input");
            inputGif.type = "hidden";
            inputGif.class = "gif-input";
            inputGif.name = "gifUrl";
            inputGif.value = url;


            form.appendChild(hiddenInputChatId);
            form.appendChild(inputGif);
            form.appendChild(image);

            form.addEventListener("click", function (e) {
                console.log("clicked on gif");
                var data = {
                    chatId: hiddenInputChatId.value,
                    gifUrl: url
                }
                sendGif(data);


            });

            var messagesNode = document.getElementById("messageDiv");
            messagesNode.appendChild(form);
        }

    }
}


        var addProfile = function (data) {
        if ("@Model.ProfileId" != data.profileId) {
        console.log("addProfile");

        console.log(data.profileId);
        console.log(data.profileName);
        var element = document.getElementsByClassName("flexbox-item flexbox-item-3");
        var divElement = document.createElement("div");
        var spanElement = document.createElement("span");
        spanElement.innerText = data.profileName;
        divElement.id = data.profileId;
        if ("@Model.OwnerId" == data.profileId) {
            spanElement.innerText += " (owner) ";
        }

        divElement.appendChild(spanElement);
        divElement.classList.add("user");
        var ele = document.getElementById("onlineList");
        ele.appendChild(divElement);

    }



}


    </script>

}

