@model ChannelSelectedViewModel
@using System.Security.Claims;
@using ChatApp.Models.Group;

<div class="flexbox-container">
    <!--Channels-->
    <div class="flexbox-item flexbox-item-1">
        <div class="title">
            <img " />
            <span>@Model.Name</span>
        </div>

        @foreach (var channel in Model.Channels)
        {
                <div class="channelText">
                    <form asp-action="JoinChannel" asp-controller="Channel" asp-route-channelId="@channel.Id">
                        <button type="submit"><span>@channel.Name</span></button>
                    </form>
                </div>
        }

    </div>
    <div class="flexbox-item flexbox-item-2">
        <!--Messages-->
        <div id="messageDiv" class="messages">

            @foreach (var message in Model.SelectedChannel.Chat.Messages)
            {
                <div class="message">
                    <header>@message.ProfileName</header>
                    <p>@message.Text</p>
                    <small>@message.Timestamp.ToShortTimeString()</small>
                </div>
            }
        </div>

        <form id="inputsendmessage" class="chat-input" onsubmit="sendMessage(event)" asp-controller="Chat" asp-action="CreateMessage">
            <input type="hidden" name="chatId" value="@Model.SelectedChannel.Chat.Id" />
            <!--File upload-->
            <label for="file-upload" class="custom-file-upload">
                <img src="~/icons/upload-files-icon.png" alt="upload-files-icon" />
                <input type="file" id="file-input" />
            </label>
            <input id="file-upload" type="file" />


            <input type="text" name="message" id="message-input" autofocus />

            <!--Gif-->
            <a id="UseGifs" class="gifIcon">
                <img src="~/icons/gif-icon.png" id="gifImg" alt="gif-icon" />
            </a>



        </form>
    </div>
    <div class="flexbox-item flexbox-item-3">
        <!--Users in channel-->
        <div class="online">
            <span id="onlineList">Online</span>
        </div>
        <div class="offline">
            <span id="offlineList">Offline</span>
        </div>



    </div>
</div>
@section scripts
    {
    <script>
        

        let api = "https://api.giphy.com/v1/gifs/search?";
        let apiKey = "&api_key=JAyUkMRhLZ0mPD6luVhc0AP1EE4zxIbk"
        let query = "&q=rainbow";
     
        let url = api + apiKey + query;
        let searchResultsGif;


         // jquery -  click on gif event
        $(function () {
            $('#UseGifs').on('click', function () {
             
                clearMessagesDiv();
 
            });
        });

        // clear messagesDiv
        var clearMessagesDiv = function ()
        {
            console.log("Clear Messages Div");
            var messagesNode = document.getElementById("messageDiv");
                messagesNode.innerHTML = '';
        }
        // display first 10 gifs
        var ShowGifs = function () {
           console.log("ShowGifs");
            if (searchResultsGif != null && searchResultsGif !== undefined)
            {
                var i = 0;
                for (i; i < 10;i++)
                {
                    var url = searchResultsGif.data[i].images.original.url;
                    var image = document.createElement("img");
                    image.width = 150;
                    image.height = 150;
                    image.src = url;

                    var messagesNode = document.getElementById("messageDiv");
                    messagesNode.appendChild(image);

                }

            }
           
            

            hideChatInputElements();

            displaySearchInput();


        }
         //hide chat input elements
        var hideChatInputElements = function ()
        {
             console.log("hideChatInputElements");
            var chatinput = document.getElementById("message-input");
            chatinput.style.display = "none";

              var gificon = document.getElementById("gifImg");
            gificon.style.display = "none";

            var fileIcon = document.getElementById("file-upload");
            fileIcon.style.display = "none";

            var filelLabel = document.getElementsByClassName("custom-file-upload")[0];
            filelLabel.style.display = "none";



        }
        // add search input
        var displaySearchInput = function ()
         {

              console.log("displaySearchInput");
             var middleContainer = document.getElementsByClassName("flexbox-item flexbox-item-2")[0];

             //document.getElementById("inputsendmessage").appendChild(searchGifInputElement);

             var chatinput = document.createElement("input");
             chatinput.id = "gifInputString";
           

             var button = document.createElement("button");
             button.id = "GiphyButton";
             button.innerText = "Giphy";
             

             var newForm = document.createElement("div");
             newForm.classList.add("chat-input");
             newForm.appendChild(chatinput);
             newForm.appendChild(button);

             var oldForm = document.getElementsByClassName("chat-input")[0];
             middleContainer.replaceChild(newForm, oldForm);

             var button = document.getElementById("GiphyButton");
             button.onclick = function ()
             {
                 var element = document.getElementById("gifInputString");
                
                 console.log("Looking up Gifs for entered keyword : "+element.value);
                 query = "&q=" + element.value;
                 url = api + apiKey + query;
               
                 console.log("fetched url: " + url);
               fetch(url)
                  .then(response => response.json())
                  .then(content => {
                   
                      console.log(content.data);
                      console.log("META", content.data);

                      updateGifs(content.data);
                    
                     element.value = "";
                  })
                  .catch(err => {
                    console.error(err);
                  });

                 
             }

             console.log("show gif input - succes");
             

        }

        var updateGifs = function(data)
        {
            
            console.log("updateGifs");

             var i = 0;
            for (i; i < 10;i++)
            {
                
                var url = data[i].images.original.url;
                var image = document.createElement("img");
                image.width = 150;
                image.height = 150;
                image.src = url;

                var messagesNode = document.getElementById("messageDiv");
                messagesNode.appendChild(image);
            }
        }


        // scroll msg div to the bottom
        window.onload=function () {
        document.getElementById("inputsendmessage").style="block";
        var element = document.getElementById('messageDiv');
            element.scrollTop = element.scrollHeight;

        }


            // grab username
            var isOwner = "@Html.Raw(Model.IsOwner)";
            console.log('isOwner var', isOwner);
            var username = "@Html.Raw(Model.Profile.UserName)";
      

            // make connection
             var _connectionId = '';
             var connection = new signalR.HubConnectionBuilder()
                     .withUrl("/chatHub")
                    .build();
                connection.serverTimeoutInMilliseconds = 100000; // 100 second

            // start
            connection.start()
            .then(function(){
             connection.invoke('getConnectionId')
               .then(function(connectionId){
                  _connectionId = connectionId
                  joinChannel();
                    })
                })
                .catch(function(err){
                    console.log(err)
                });

            // enable input for chat
            function ToggleInput() {
            var x = document.getElementById("inputsendmessage");
            if (x.style.display === "none") {
                x.style.display = "block";
            } else {
                x.style.display = "none";
            }
        }

            // join channel
            var joinChannel = function () {
            var url = '/Chat/JoinChannel/' + _connectionId + '/@Model.Id'
            axios.post(url, null)
                .then(res => {
                    console.log("Channel Joined!", res);

                })
                .catch(err => {
                    console.log("Failed to join Channel!", err);
                })
        }

            // UserJoinedChannel event
        connection.on("UserJoinedChannel", function (data)
        {
             console.log("UserJoinedChannel");
            //msg in chat
            var message = document.createElement("div");
            message.classList.add('message');
            var header = document.createElement("header");
            header.appendChild(document.createTextNode(data.name));
     
            var p = document.createElement("p");
            p.appendChild(document.createTextNode(data.text));

            var small = document.createElement("small");
            var text = data.timestamp;
            small.appendChild(document.createTextNode(text)); 

            message.appendChild(header);
            message.appendChild(p);
            message.appendChild(small);

             document.getElementById("messageDiv").append(message)

      

            });

            //
        connection.on("ReceiveMessage", function (data) {

                console.log("ReceiveMessage");
            var message = document.createElement("div");
            message.classList.add('message');

            var header = document.createElement("header");
            header.appendChild(document.createTextNode(data.name));

            var p = document.createElement("p");
            p.appendChild(document.createTextNode(data.text));

            var small = document.createElement("small");
            var text = data.timestamp;
            small.appendChild(document.createTextNode(text));

            message.appendChild(header);
            message.appendChild(p);
            message.appendChild(small);

            document.getElementById("messageDiv").append(message)
            });
            //
        connection.on("UserLeftChannel", function (data) {

           console.log("UserLeftChannel");
            // log data
            console.log('data', data);

            // create user left message 

            var message = document.createElement("div");
            message.classList.add('message');

            var header = document.createElement("header");
            header.appendChild(document.createTextNode("server"));

                var p = document.createElement("p");
                p.appendChild(document.createTextNode(data.profileName + ' went offline. '));



            message.appendChild(header);
            message.appendChild(p);



                console.log(data.profileId);
            // remove from online list and put into offline   
                document.getElementById(data.profileId).remove();
                console.log("remove from online list");

            var ele = document.getElementById("onlineList");
            ele.appendChild(divElement);
  

              document.getElementById("messageDiv").append(message)
                var element = document.getElementsByClassName('offline');




            });
            //
        connection.on("UpdateUsersOnline", function (data) {
            console.log("UpdateUsersOnline");
            
            document.getElementsByClassName("user")
                data.forEach(element => addProfile(element));
            });
            //

            //
            var addProfile = function (data)
            {
                if ("@Model.ProfileId" != data.profileId)
                {
                    console.log("addProfile");
                     
                     console.log(data.profileId);
                     console.log(data.profileName);
                     var element = document.getElementsByClassName('flexbox-item flexbox-item-3');
                     var divElement = document.createElement("div");
                     var spanElement = document.createElement("span");
                     spanElement.innerText = data.profileName;
                     divElement.id = data.profileId;
                     if("@Model.OwnerId"==data.profileId)
                     {
                         spanElement.innerText+=" (owner) ";
                     }
                      
                      divElement.appendChild(spanElement);
                      divElement.classList.add("user");
                       var ele = document.getElementById("onlineList");
                         ele.appendChild(divElement);
                
                }
                

            
            }
            //
            var sendMessage = function(event)
            {
                console.log("sendMessage");
                    event.preventDefault();

                    var data = new FormData(event.target);
                    document.getElementById('message-input').value = '';
                    axios.post('/Chat/SendMessage',data)
                    .then(res=>{
                        console.log("Message Sent!")

                    })
                    .catch(err=>{
                        console.log("Failed to send message")

                    })
                   }


    </script>

}

